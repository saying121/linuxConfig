# vim: set fenc=utf-8 ft=dosini:

; <F3>
[file-build]

# check ":AsyncTaskMacro" to see available macros
; command:c=[ -d build_c_cpp ] || mkdir build_c_cpp; gcc -O2 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/build_c_cpp/$(VIM_FILENOEXT)"
; command:cpp=[ -d build_c_cpp ] || mkdir build_c_cpp; g++ -O2 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/build_c_cpp/$(VIM_FILENOEXT)"
command:c=[ -d build_c_cpp ] || mkdir build_c_cpp; clang -O2 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/build_c_cpp/$(VIM_FILENOEXT)"
command:cpp=[ -d build_c_cpp ] || mkdir build_c_cpp; clang++ -O2 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/build_c_cpp/$(VIM_FILENOEXT)"
command:go=[ -d build_go ] || mkdir build_go; go build -o "$(VIM_FILEDIR)/build_go/$(VIM_FILENOEXT)"
# command:rust=[ -d build_rust ] || mkdir build_rust; rustc -o "$(VIM_FILEDIR)/build_rust/$(VIM_FILENOEXT)" "$(VIM_FILEPATH)"
# command:rust=[ -d build_rust ] || mkdir build_rust; rustc -o "$(VIM_FILEDIR)/build_rust/"`rev <<<"$(VIM_FILENAME)" | cut -d '.' -f 2- | rev | tr '.' '_'` --crate-name `rev <<<"$(VIM_FILENAME)" | cut -d '.' -f 2- | rev | tr '.' '_'` "$(VIM_FILENAME)"
command:rust=[ -d build_rust ] || mkdir build_rust; rustc -o "$(VIM_FILEDIR)/build_rust/$(VIM_FILENOEXT)" --crate-name `rev <<<"$(VIM_FILENAME)" | cut -d '.' -f 2- | rev | tr '.' '_' | tr '-' '__'` "$(VIM_FILENAME)"

cwd=$(VIM_FILEDIR)
output=terminal
save=2

# this is for output=quickfix only
# if it is omitted, vim's current errorformat will be used.
errorformat=%f:%l:%m

; <F4>
[file-run]
command="$(VIM_FILEPATH)"
command:c,cpp=time "$(VIM_FILEDIR)/build_c_cpp/$(VIM_FILENOEXT)"
command:dockerfile=time docker build .
command:go=time "$(VIM_FILEDIR)/build_go/$(VIM_FILENOEXT)"
command:rust=time "$(VIM_FILEDIR)/build_rust/$(VIM_FILENOEXT)"
# command:rust=time "$(VIM_FILEDIR)/build_rust/$(VIM_FILENOEXT)"`rev <<<"$(VIM_FILENAME)" | cut -d '.' -f 2- | rev | tr '.' '_'`

# 脚本类型语言，不需编译，(python 是有编译过程的
command:awk=time awk -f "$(VIM_FILEPATH)"
command:javascript=time node "$(VIM_FILENAME)"
command:lua=time luajit "$(VIM_FILENAME)"
command:perl=time perl "$(VIM_FILENAME)"
command:python=time python -u "$(VIM_FILENAME)"
command:ruby=time ruby "$(VIM_FILENAME)"
command:sh=time bash "$(VIM_FILENAME)"
command:zsh=time zsh "$(VIM_FILENAME)"

cwd=$(VIM_FILEDIR)
output=terminal
save=2

# Alt+b
[project-build]
command:rust=time cargo build
command:c,cpp=time [ -d build ] || mkdir build;cd build; cmake ..; make

cwd=$(VIM_ROOT)
output=terminal
errorformat=%f:%l:%m
save=2

# Alt+r
[project-run]
command:rust=time cargo run

# 脚本类型语言，不需编译，(python 是有编译过程的
command:awk=time awk -f "$(VIM_FILEPATH)"
command:javascript=time node "$(VIM_FILENAME)"
command:lua=time luajit "$(VIM_FILENAME)"
command:perl=time perl "$(VIM_FILENAME)"
# command:python=python -u main.py
command:python=time python -u "$(VIM_FILENAME)"
command:ruby=time ruby "$(VIM_FILENAME)"
command:sh=time bash "$(VIM_FILENAME)"
command:zsh=time zsh "$(VIM_FILENAME)"

cwd=$(VIM_ROOT)
output=terminal
save=2

[release]
# command/linux=echo linux default
command:rust/linux=time cargo build --release

cwd=$(VIM_ROOT)
output=terminal
save=2

[release and run]
# command/linux=echo linux default
command:rust/linux=time cargo run --release

cwd=$(VIM_ROOT)
output=terminal
save=2

[debug]
# command/linux=echo linux default
command:rust/linux=time cargo build

cwd=$(VIM_ROOT)
output=terminal
save=2

# vim: set fenc=utf-8 ft=dosini:

; <F3>
[file-build]

# check ":AsyncTaskMacro" to see available macros
; command:c=[ -d build ] || mkdir build; gcc -O2 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/build/$(VIM_FILENOEXT)"
; command:cpp=[ -d build ] || mkdir build; g++ -O2 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/build/$(VIM_FILENOEXT)"
command:c=[ -d build ] || mkdir build; clang -O2 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/build/$(VIM_FILENOEXT)"
command:cpp=[ -d build ] || mkdir build; clang++ -O2 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/build/$(VIM_FILENOEXT)"
; command:go=
command:rust=time cargo build

cwd=$(VIM_FILEDIR)
output=terminal
save=2

# this is for output=quickfix only
# if it is omitted, vim's current errorformat will be used.
errorformat=%f:%l:%m

; <F4>
[file-run]
command="$(VIM_FILEPATH)"
command:awk=time awk -f "$(VIM_FILEPATH)"
command:c,cpp=time "$(VIM_FILEDIR)/build/$(VIM_FILENOEXT)"
command:dockerfile=time docker build .
command:go=time "$(VIM_PATHNOEXT)"
command:javascript=time node "$(VIM_FILENAME)"
command:lua=time luajit "$(VIM_FILENAME)"
command:perl=time perl "$(VIM_FILENAME)"
command:python=time python -u "$(VIM_FILENAME)"
command:ruby=time ruby "$(VIM_FILENAME)"
command:rust=time cargo run
command:sh=time sh "$(VIM_FILENAME)"
command:zsh=time zsh "$(VIM_FILENAME)"

cwd=$(VIM_FILEDIR)
output=terminal
save=2

[project-build]
cwd=$(VIM_ROOT)
output=quickfix
errorformat=%f:%l:%m
save=2

[project-run]
command:python=python -u main.py

cwd=$(VIM_ROOT)
output=terminal
save=2
